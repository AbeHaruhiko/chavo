/// <reference path="../../../.tmp/typings/tsd.d.ts" />
Parse.Cloud.define('hello', function (request, response) {
    response.success('Hello world!');
});
Parse.Cloud.define('toggleLike', function (request, response) {
    // 人のvoiceのlikceCountをincrementするのでuseMasterKey
    Parse.Cloud.useMasterKey();
    var voice = request.params.voice;
    // ↓のトグルはローカルで実施済み
    // voice.like = !voice.like;
    var ParseVoice = Parse.Object.extend('Voice');
    var parseVoice = new ParseVoice();
    parseVoice.id = voice.objectId;
    if (voice.like) {
        request.user.addUnique('likes', voice.objectId);
        parseVoice.increment('likeCount');
    }
    else {
        request.user.remove('likes', voice.objectId);
        parseVoice.increment('likeCount', -1);
    }
    request.user.save()
        .then(function (user) {
        console.log('user: ' + user);
        console.log('likes: ' + user.get('likes'));
        return parseVoice.save();
    }, function (error) {
        console.error('Error: ' + error.code + ' ' + error.message);
        response.error('Error: ' + error.code + ' ' + error.message);
    })
        .then(function (parseVoice) {
        console.log('likeCound: ' + parseVoice.get('likeCount'));
        response.success(parseVoice.get('likeCount'));
    }, function (error) {
        console.error('Error: ' + error.code + ' ' + error.message);
        response.error('Error: ' + error.code + ' ' + error.message);
    });
});
Parse.Cloud.define('saveTag', function (request, response) {
    var tags = request.params.tags;
    tags.forEach(function (tag) {
        console.log(tag);
        var ParseTag = Parse.Object.extend('Tag');
        var query = new Parse.Query(ParseTag);
        query.equalTo('tag', tag);
        query.count().then(function (count) {
            console.log('count: ' + count);
            if (count === 0) {
                var parseTag = new ParseTag();
                parseTag.set('tag', tag);
                return parseTag.save();
            }
        })
            .then(function (parseTag) {
            if (parseTag) {
                console.log('saved tag: ' + parseTag.get('tag'));
            }
        });
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNsb3VkL21haW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsdURBQXVEO0FBRXZELEtBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxVQUFTLE9BQW9DLEVBQUUsUUFBc0M7SUFDL0csUUFBUSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUNuQyxDQUFDLENBQUMsQ0FBQztBQUVILEtBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxVQUFTLE9BQW9DLEVBQUUsUUFBc0M7SUFFcEgsK0NBQStDO0lBQy9DLEtBQUssQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDM0IsSUFBSSxLQUFLLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7SUFDakMsa0JBQWtCO0lBQ2xCLDRCQUE0QjtJQUU1QixJQUFJLFVBQVUsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUM5QyxJQUFJLFVBQVUsR0FBRyxJQUFJLFVBQVUsRUFBRSxDQUFDO0lBQ2xDLFVBQVUsQ0FBQyxFQUFFLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQztJQUUvQixFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNmLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDaEQsVUFBVSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBQUMsSUFBSSxDQUFDLENBQUM7UUFDTixPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzdDLFVBQVUsQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDeEMsQ0FBQztJQUVELE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFO1NBQ2xCLElBQUksQ0FBQyxVQUFDLElBQWdCO1FBQ3JCLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxDQUFDO1FBQzdCLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUMzQyxNQUFNLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQzNCLENBQUMsRUFDRCxVQUFDLEtBQWtCO1FBQ2pCLE9BQU8sQ0FBQyxLQUFLLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQyxJQUFJLEdBQUcsR0FBRyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUU1RCxRQUFRLENBQUMsS0FBSyxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUMsSUFBSSxHQUFHLEdBQUcsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDL0QsQ0FBQyxDQUFDO1NBQ0QsSUFBSSxDQUFDLFVBQUMsVUFBd0I7UUFDN0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhLEdBQUcsVUFBVSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO1FBQ3pELFFBQVEsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO0lBQ2hELENBQUMsRUFDRCxVQUFDLEtBQWtCO1FBQ2pCLE9BQU8sQ0FBQyxLQUFLLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQyxJQUFJLEdBQUcsR0FBRyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUU1RCxRQUFRLENBQUMsS0FBSyxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUMsSUFBSSxHQUFHLEdBQUcsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDL0QsQ0FBQyxDQUFDLENBQUM7QUFFTCxDQUFDLENBQUMsQ0FBQztBQUVILEtBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxVQUFTLE9BQW9DLEVBQUUsUUFBc0M7SUFDakgsSUFBSSxJQUFJLEdBQWEsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUM7SUFFekMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFDLEdBQVc7UUFDdkIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNqQixJQUFJLFFBQVEsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUUxQyxJQUFJLEtBQUssR0FBRyxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDdEMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDMUIsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFDLEtBQWE7WUFDL0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDLENBQUM7WUFDL0IsRUFBRSxDQUFDLENBQUMsS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2hCLElBQUksUUFBUSxHQUFHLElBQUksUUFBUSxFQUFFLENBQUM7Z0JBQzlCLFFBQVEsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO2dCQUN6QixNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO1lBQ3pCLENBQUM7UUFDSCxDQUFDLENBQUM7YUFDRCxJQUFJLENBQUMsVUFBQyxRQUFzQjtZQUMzQixFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO2dCQUNiLE9BQU8sQ0FBQyxHQUFHLENBQUMsYUFBYSxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQTtZQUNsRCxDQUFDO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUVMLENBQUMsQ0FBQyxDQUFDIiwiZmlsZSI6ImNsb3VkL21haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vLi4vLnRtcC90eXBpbmdzL3RzZC5kLnRzXCIgLz5cblxuUGFyc2UuQ2xvdWQuZGVmaW5lKCdoZWxsbycsIGZ1bmN0aW9uKHJlcXVlc3Q6IFBhcnNlLkNsb3VkLkZ1bmN0aW9uUmVxdWVzdCwgcmVzcG9uc2U6IFBhcnNlLkNsb3VkLkZ1bmN0aW9uUmVzcG9uc2UpIHtcbiAgcmVzcG9uc2Uuc3VjY2VzcygnSGVsbG8gd29ybGQhJyk7XG59KTtcblxuUGFyc2UuQ2xvdWQuZGVmaW5lKCd0b2dnbGVMaWtlJywgZnVuY3Rpb24ocmVxdWVzdDogUGFyc2UuQ2xvdWQuRnVuY3Rpb25SZXF1ZXN0LCByZXNwb25zZTogUGFyc2UuQ2xvdWQuRnVuY3Rpb25SZXNwb25zZSkge1xuXG4gIC8vIOS6uuOBrnZvaWNl44GubGlrY2VDb3VudOOCkmluY3JlbWVudOOBmeOCi+OBruOBp3VzZU1hc3RlcktleVxuICBQYXJzZS5DbG91ZC51c2VNYXN0ZXJLZXkoKTtcbiAgdmFyIHZvaWNlID0gcmVxdWVzdC5wYXJhbXMudm9pY2U7XG4gIC8vIOKGk+OBruODiOOCsOODq+OBr+ODreODvOOCq+ODq+OBp+Wun+aWvea4iOOBv1xuICAvLyB2b2ljZS5saWtlID0gIXZvaWNlLmxpa2U7XG5cbiAgdmFyIFBhcnNlVm9pY2UgPSBQYXJzZS5PYmplY3QuZXh0ZW5kKCdWb2ljZScpO1xuICB2YXIgcGFyc2VWb2ljZSA9IG5ldyBQYXJzZVZvaWNlKCk7XG4gIHBhcnNlVm9pY2UuaWQgPSB2b2ljZS5vYmplY3RJZDtcblxuICBpZiAodm9pY2UubGlrZSkge1xuICAgIHJlcXVlc3QudXNlci5hZGRVbmlxdWUoJ2xpa2VzJywgdm9pY2Uub2JqZWN0SWQpO1xuICAgIHBhcnNlVm9pY2UuaW5jcmVtZW50KCdsaWtlQ291bnQnKTtcbiAgfSBlbHNlIHtcbiAgICByZXF1ZXN0LnVzZXIucmVtb3ZlKCdsaWtlcycsIHZvaWNlLm9iamVjdElkKTtcbiAgICBwYXJzZVZvaWNlLmluY3JlbWVudCgnbGlrZUNvdW50JywgLTEpO1xuICB9XG5cbiAgcmVxdWVzdC51c2VyLnNhdmUoKVxuICAudGhlbigodXNlcjogUGFyc2UuVXNlcikgPT4ge1xuICAgIGNvbnNvbGUubG9nKCd1c2VyOiAnICsgdXNlcik7XG4gICAgY29uc29sZS5sb2coJ2xpa2VzOiAnICsgdXNlci5nZXQoJ2xpa2VzJykpO1xuICAgIHJldHVybiBwYXJzZVZvaWNlLnNhdmUoKTtcbiAgfSxcbiAgKGVycm9yOiBQYXJzZS5FcnJvcikgPT4ge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yOiAnICsgZXJyb3IuY29kZSArICcgJyArIGVycm9yLm1lc3NhZ2UpO1xuXG4gICAgcmVzcG9uc2UuZXJyb3IoJ0Vycm9yOiAnICsgZXJyb3IuY29kZSArICcgJyArIGVycm9yLm1lc3NhZ2UpO1xuICB9KVxuICAudGhlbigocGFyc2VWb2ljZTogUGFyc2UuT2JqZWN0KSA9PiB7XG4gICAgY29uc29sZS5sb2coJ2xpa2VDb3VuZDogJyArIHBhcnNlVm9pY2UuZ2V0KCdsaWtlQ291bnQnKSk7XG4gICAgcmVzcG9uc2Uuc3VjY2VzcyhwYXJzZVZvaWNlLmdldCgnbGlrZUNvdW50JykpO1xuICB9LFxuICAoZXJyb3I6IFBhcnNlLkVycm9yKSA9PiB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3I6ICcgKyBlcnJvci5jb2RlICsgJyAnICsgZXJyb3IubWVzc2FnZSk7XG5cbiAgICByZXNwb25zZS5lcnJvcignRXJyb3I6ICcgKyBlcnJvci5jb2RlICsgJyAnICsgZXJyb3IubWVzc2FnZSk7XG4gIH0pO1xuXG59KTtcblxuUGFyc2UuQ2xvdWQuZGVmaW5lKCdzYXZlVGFnJywgZnVuY3Rpb24ocmVxdWVzdDogUGFyc2UuQ2xvdWQuRnVuY3Rpb25SZXF1ZXN0LCByZXNwb25zZTogUGFyc2UuQ2xvdWQuRnVuY3Rpb25SZXNwb25zZSkge1xuICB2YXIgdGFnczogc3RyaW5nW10gPSByZXF1ZXN0LnBhcmFtcy50YWdzO1xuXG4gIHRhZ3MuZm9yRWFjaCgodGFnOiBzdHJpbmcpID0+IHtcbiAgICBjb25zb2xlLmxvZyh0YWcpO1xuICAgIHZhciBQYXJzZVRhZyA9IFBhcnNlLk9iamVjdC5leHRlbmQoJ1RhZycpO1xuXG4gICAgdmFyIHF1ZXJ5ID0gbmV3IFBhcnNlLlF1ZXJ5KFBhcnNlVGFnKTtcbiAgICBxdWVyeS5lcXVhbFRvKCd0YWcnLCB0YWcpO1xuICAgIHF1ZXJ5LmNvdW50KCkudGhlbigoY291bnQ6IG51bWJlcikgPT4ge1xuICAgICAgY29uc29sZS5sb2coJ2NvdW50OiAnICsgY291bnQpO1xuICAgICAgaWYgKGNvdW50ID09PSAwKSB7XG4gICAgICAgIHZhciBwYXJzZVRhZyA9IG5ldyBQYXJzZVRhZygpO1xuICAgICAgICBwYXJzZVRhZy5zZXQoJ3RhZycsIHRhZyk7XG4gICAgICAgIHJldHVybiBwYXJzZVRhZy5zYXZlKCk7XG4gICAgICB9XG4gICAgfSlcbiAgICAudGhlbigocGFyc2VUYWc6IFBhcnNlLk9iamVjdCkgPT4ge1xuICAgICAgaWYgKHBhcnNlVGFnKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdzYXZlZCB0YWc6ICcgKyBwYXJzZVRhZy5nZXQoJ3RhZycpKVxuICAgICAgfVxuICAgIH0pO1xuICB9KTtcblxufSk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=