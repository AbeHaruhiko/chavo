/// <reference path='../../../.tmp/typings/tsd.d.ts' />
Parse.Cloud.define('hello', function (request, response) {
    response.success('Hello world!');
});
Parse.Cloud.define('toggleLike', function (request, response) {
    // 人のvoiceのlikceCountをincrementするのでuseMasterKey
    Parse.Cloud.useMasterKey();
    var voice = request.params.voice;
    // ↓のトグルはローカルで実施済み
    // voice.like = !voice.like;
    var ParseVoice = Parse.Object.extend('Voice');
    var parseVoice = new ParseVoice();
    parseVoice.id = voice.objectId;
    if (voice.like) {
        request.user.addUnique('likes', voice.objectId);
        parseVoice.increment('likeCount');
    }
    else {
        request.user.remove('likes', voice.objectId);
        parseVoice.increment('likeCount', -1);
    }
    request.user.save()
        .then(function (user) {
        console.log('user: ' + user);
        console.log('likes: ' + user.get('likes'));
        return parseVoice.save();
    }, function (error) {
        console.error('Error: ' + error.code + ' ' + error.message);
        response.error('Error: ' + error.code + ' ' + error.message);
    })
        .then(function (parseVoice) {
        console.log('likeCound: ' + parseVoice.get('likeCount'));
        response.success(parseVoice.get('likeCount'));
    }, function (error) {
        console.error('Error: ' + error.code + ' ' + error.message);
        response.error('Error: ' + error.code + ' ' + error.message);
    });
});
Parse.Cloud.define('saveTag', function (request, response) {
    var tags = request.params.tags;
    tags.forEach(function (tag) {
        console.log(tag);
        var ParseTag = Parse.Object.extend('Tag');
        var query = new Parse.Query(ParseTag);
        query.equalTo('tag', tag);
        query.count().then(function (count) {
            console.log('count: ' + count);
            if (count === 0) {
                var parseTag = new ParseTag();
                parseTag.set('tag', tag);
                return parseTag.save();
            }
        })
            .then(function (parseTag) {
            if (parseTag) {
                console.log('saved tag: ' + parseTag.get('tag'));
            }
        });
    });
});
Parse.Cloud.define('addFamily', function (request, response) {
    // 人のChildを共有するようにACLを編集したりRoleを作ったりするのでマスターキー使用。
    Parse.Cloud.useMasterKey();
    // toUserIdかfromUserIdの家族を表すRoleがあるか
    var toUser = new Parse.User();
    var fromUser = new Parse.User();
    // 申請先ユーザ（承認者）
    toUser.id = request.user.id;
    // 申請元ユーザ（申請者）
    fromUser.id = request.params.familyApplication.fromUserObjectId;
    // 申請者、承認者のFamilyデータを検索する。
    var toUserFamilyQuery = new Parse.Query('Family');
    toUserFamilyQuery.equalTo('member', request.user);
    var fromUserFamilyQuery = new Parse.Query('Family');
    fromUserFamilyQuery.equalTo('member', fromUser);
    // orでクエリを作る。
    var familyQuery = Parse.Query.or(toUserFamilyQuery, fromUserFamilyQuery);
    var family;
    var familyRole;
    var children;
    familyQuery.first()
        .then(function (family) {
        console.log('enter 1');
        console.log(family);
        if (!family) {
            console.log('既存familyなし');
            // 既存のFamilyがないので作る。
            var ParseFamily = Parse.Object.extend('Family');
            family = new ParseFamily();
            family.setACL(new Parse.ACL());
        }
        var relation = family.relation('member');
        relation.add(toUser);
        relation.add(fromUser);
        return family.save();
    }).then(function (result) {
        console.log('enter 2');
        console.log(result);
        family = result;
        // .FamilyのオブジェクトIDをnameに持つRoleを探す。
        var familyRoleQuery = new Parse.Query(Parse.Role);
        console.log(result.id);
        familyRoleQuery.equalTo('name', result.id);
        return familyRoleQuery.first();
    }).then(function (result) {
        console.log('enter 3');
        console.log(result);
        if (result) {
            console.log('ロールあり: name = ' + family.id + ': ' + result);
            familyRole = result;
        }
        else {
            // 既存Roleがなければ作る。
            familyRole = new Parse.Role(family.id, new Parse.ACL());
            console.log('ロールなし: name = ' + family.id + 'を作ります。');
        }
        console.log(familyRole.getUsers());
        familyRole.getUsers().add(toUser);
        familyRole.getUsers().add(fromUser);
        return familyRole.save();
    }).then(function (result) {
        console.log('enter 4');
        console.log(result);
        // 承認者と申請者のこども情報を取得
        var ParseChild = Parse.Object.extend('Child');
        var toUserQuery = new Parse.Query(ParseChild);
        var fromUserQuery = new Parse.Query(ParseChild);
        // containedInはParse.Objectには使えない模様
        // query.containedIn('createdBy', [ toUser, fromUser ]);
        console.log('toUser:' + toUser);
        console.log('fromUser:' + fromUser);
        toUserQuery.equalTo('createdBy', toUser);
        fromUserQuery.equalTo('createdBy', fromUser);
        console.log(1);
        return Parse.Query.or(toUserQuery, fromUserQuery).find();
    }).then(function (parseChildren) {
        console.log('parseChildren:' + parseChildren);
        var promises = [];
        parseChildren.forEach(function (parseChild) {
            console.log('parseChild:' + parseChild);
            var childACL = new Parse.ACL();
            childACL.setRoleReadAccess(familyRole, true);
            childACL.setRoleWriteAccess(familyRole, true);
            parseChild.setACL(childACL);
        });
        promises.push(Parse.Object.saveAll(parseChildren));
        return Parse.Promise.when(promises);
    }).then(function () {
        console.log('enter 5');
        // 全投稿を取得
        var ParseVoice = Parse.Object.extend('Voice');
        // TODO: 'user'でなく'createdBy'にしたい。
        // containedInはParse.Objectには使えない模様
        // query.containedIn('user', [ toUser, fromUser ]);
        var toUserQuery = new Parse.Query(ParseVoice);
        var fromUserQuery = new Parse.Query(ParseVoice);
        toUserQuery.equalTo('user', toUser);
        fromUserQuery.equalTo('user', fromUser);
        var voiceQuery = Parse.Query.or(toUserQuery, fromUserQuery);
        return voiceQuery.count();
    }).then(function (countResult) {
        console.log('countResult:' + countResult);
        var promises = [];
        var ParseVoice = Parse.Object.extend('Voice');
        var toUserQuery = new Parse.Query(ParseVoice);
        var fromUserQuery = new Parse.Query(ParseVoice);
        toUserQuery.equalTo('user', toUser);
        fromUserQuery.equalTo('user', fromUser);
        var voiceQuery = Parse.Query.or(toUserQuery, fromUserQuery);
        for (var i = 0; i < countResult / 1000; i++) {
            voiceQuery.limit(1000);
            voiceQuery.skip(1000 * i);
            promises.push(voiceQuery.find());
        }
        return Parse.Promise.when(promises);
    }).then(function () {
        var voicesArray = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            voicesArray[_i - 0] = arguments[_i];
        }
        console.log('voices:' + voicesArray);
        var promises = [];
        voicesArray.forEach(function (voices) {
            voices.forEach(function (voice) {
                console.log('voice:' + voice);
                var voiceACL = new Parse.ACL();
                voiceACL.setRoleReadAccess(familyRole, true);
                voiceACL.setRoleWriteAccess(familyRole, true);
                voice.setACL(voiceACL);
            });
            promises.push(Parse.Object.saveAll(voices));
            return Parse.Promise.when(promises);
        });
    }).then(function () {
        console.log('enter 6');
        response.success('Success!');
    }, function (error) {
        console.error('Error: ' + error.code + ' ' + error.message);
        response.error('Error! see log on Parse.com.');
    });
});
Parse.Cloud.define('getRequestUsersFamilyRole', function (request, response) {
    Parse.Cloud.useMasterKey();
    var familyQuery = new Parse.Query('Family');
    familyQuery.equalTo('member', request.user);
    familyQuery.first()
        .then(function (result) {
        if (result) {
            var roleQuery = new Parse.Query(Parse.Role);
            roleQuery.equalTo('name', result.id);
            return roleQuery.first();
        }
        else {
            return Parse.Promise.as(null);
        }
    }).then(function (result) {
        response.success(result);
    });
});
Parse.Cloud.define('getRequestUsersFamilyMember', function (request, response) {
    Parse.Cloud.useMasterKey();
    var familyQuery = new Parse.Query('Family');
    familyQuery.equalTo('member', request.user);
    familyQuery.first()
        .then(function (result) {
        console.log(result);
        var query = result.relation('member').query();
        // 他ユーザに返却するのでパスワードなどは返さない。
        query.select('username', 'iconUrl');
        return query.find();
    }).then(function (result) {
        console.log(result);
        response.success(result);
    });
});
Parse.Cloud.define('getFamilyAppToRequestUser', function (request, response) {
    Parse.Cloud.useMasterKey();
    var ParseFamilyApplication = Parse.Object.extend('FamilyApplication');
    var query = new Parse.Query(ParseFamilyApplication);
    query.descending('createdAt');
    // 自分宛て
    query.equalTo('toUser', request.user);
    query.include('fromUser');
    query.find()
        .then(function (result) {
        response.success(result);
    }, function (error) {
        response.error(error);
    });
});
Parse.Cloud.define('getFamilyAppFromRequestUser', function (request, response) {
    Parse.Cloud.useMasterKey();
    var ParseFamilyApplication = Parse.Object.extend('FamilyApplication');
    var query = new Parse.Query(ParseFamilyApplication);
    query.descending('createdAt');
    // 自分宛て
    query.equalTo('fromUser', request.user);
    query.include('fromUser');
    query.include('toUser');
    query.find()
        .then(function (result) {
        response.success(result);
    }, function (error) {
        response.error(error);
    });
});

//# sourceMappingURL=data:application/json;base64,