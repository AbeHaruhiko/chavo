/// <reference path="../../../.tmp/typings/tsd.d.ts" />
Parse.Cloud.define('hello', function (request, response) {
    response.success('Hello world!');
});
Parse.Cloud.define('toggleLike', function (request, response) {
    // 人のvoiceのlikceCountをincrementするのでuseMasterKey
    Parse.Cloud.useMasterKey();
    var voice = request.params.voice;
    // ↓のトグルはローカルで実施済み
    // voice.like = !voice.like;
    var ParseVoice = Parse.Object.extend('Voice');
    var parseVoice = new ParseVoice();
    parseVoice.id = voice.objectId;
    if (voice.like) {
        request.user.addUnique('likes', voice.objectId);
        parseVoice.increment('likeCount');
    }
    else {
        request.user.remove('likes', voice.objectId);
        parseVoice.increment('likeCount', -1);
    }
    request.user.save()
        .then(function (user) {
        console.log('user: ' + user);
        console.log('likes: ' + user.get('likes'));
        return parseVoice.save();
    }, function (error) {
        console.error('Error: ' + error.code + ' ' + error.message);
        response.error('Error: ' + error.code + ' ' + error.message);
    })
        .then(function (parseVoice) {
        console.log('likeCound: ' + parseVoice.get('likeCount'));
        response.success(parseVoice.get('likeCount'));
    }, function (error) {
        console.error('Error: ' + error.code + ' ' + error.message);
        response.error('Error: ' + error.code + ' ' + error.message);
    });
});
Parse.Cloud.define('saveTag', function (request, response) {
    var tags = request.params.tags;
    tags.forEach(function (tag) {
        console.log(tag);
        var ParseTag = Parse.Object.extend('Tag');
        var query = new Parse.Query(ParseTag);
        query.equalTo('tag', tag.text);
        query.count().then(function (count) {
            if (count === 0) {
                var parseTag = new ParseTag();
                parseTag.set('tag', tag.text);
                return parseTag.save();
            }
        })
            .then(function (parseTag) {
            if (parseTag) {
                console.log('saved tag: ' + parseTag.get('tag'));
            }
        });
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNsb3VkL21haW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsdURBQXVEO0FBRXZELEtBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxVQUFTLE9BQW9DLEVBQUUsUUFBc0M7SUFDL0csUUFBUSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUNuQyxDQUFDLENBQUMsQ0FBQztBQUVILEtBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxVQUFTLE9BQW9DLEVBQUUsUUFBc0M7SUFFcEgsK0NBQStDO0lBQy9DLEtBQUssQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDM0IsSUFBSSxLQUFLLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7SUFDakMsa0JBQWtCO0lBQ2xCLDRCQUE0QjtJQUU1QixJQUFJLFVBQVUsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUM5QyxJQUFJLFVBQVUsR0FBRyxJQUFJLFVBQVUsRUFBRSxDQUFDO0lBQ2xDLFVBQVUsQ0FBQyxFQUFFLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQztJQUUvQixFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNmLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDaEQsVUFBVSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBQUMsSUFBSSxDQUFDLENBQUM7UUFDTixPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzdDLFVBQVUsQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDeEMsQ0FBQztJQUVELE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFO1NBQ2xCLElBQUksQ0FBQyxVQUFDLElBQWdCO1FBQ3JCLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxDQUFDO1FBQzdCLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUMzQyxNQUFNLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQzNCLENBQUMsRUFDRCxVQUFDLEtBQWtCO1FBQ2pCLE9BQU8sQ0FBQyxLQUFLLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQyxJQUFJLEdBQUcsR0FBRyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUU1RCxRQUFRLENBQUMsS0FBSyxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUMsSUFBSSxHQUFHLEdBQUcsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDL0QsQ0FBQyxDQUFDO1NBQ0QsSUFBSSxDQUFDLFVBQUMsVUFBd0I7UUFDN0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhLEdBQUcsVUFBVSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO1FBQ3pELFFBQVEsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO0lBQ2hELENBQUMsRUFDRCxVQUFDLEtBQWtCO1FBQ2pCLE9BQU8sQ0FBQyxLQUFLLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQyxJQUFJLEdBQUcsR0FBRyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUU1RCxRQUFRLENBQUMsS0FBSyxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUMsSUFBSSxHQUFHLEdBQUcsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDL0QsQ0FBQyxDQUFDLENBQUM7QUFFTCxDQUFDLENBQUMsQ0FBQztBQUVILEtBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxVQUFTLE9BQW9DLEVBQUUsUUFBc0M7SUFDakgsSUFBSSxJQUFJLEdBQXdCLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDO0lBRXBELElBQUksQ0FBQyxPQUFPLENBQUMsVUFBQyxHQUFzQjtRQUNsQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2pCLElBQUksUUFBUSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRTFDLElBQUksS0FBSyxHQUFHLElBQUksS0FBSyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN0QyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDL0IsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFDLEtBQWE7WUFDL0IsRUFBRSxDQUFDLENBQUMsS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2hCLElBQUksUUFBUSxHQUFHLElBQUksUUFBUSxFQUFFLENBQUM7Z0JBQzlCLFFBQVEsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDOUIsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUN6QixDQUFDO1FBQ0gsQ0FBQyxDQUFDO2FBQ0QsSUFBSSxDQUFDLFVBQUMsUUFBc0I7WUFDM0IsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztnQkFDYixPQUFPLENBQUMsR0FBRyxDQUFDLGFBQWEsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUE7WUFDbEQsQ0FBQztRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFFTCxDQUFDLENBQUMsQ0FBQyIsImZpbGUiOiJjbG91ZC9tYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uLy4uLy50bXAvdHlwaW5ncy90c2QuZC50c1wiIC8+XG5cblBhcnNlLkNsb3VkLmRlZmluZSgnaGVsbG8nLCBmdW5jdGlvbihyZXF1ZXN0OiBQYXJzZS5DbG91ZC5GdW5jdGlvblJlcXVlc3QsIHJlc3BvbnNlOiBQYXJzZS5DbG91ZC5GdW5jdGlvblJlc3BvbnNlKSB7XG4gIHJlc3BvbnNlLnN1Y2Nlc3MoJ0hlbGxvIHdvcmxkIScpO1xufSk7XG5cblBhcnNlLkNsb3VkLmRlZmluZSgndG9nZ2xlTGlrZScsIGZ1bmN0aW9uKHJlcXVlc3Q6IFBhcnNlLkNsb3VkLkZ1bmN0aW9uUmVxdWVzdCwgcmVzcG9uc2U6IFBhcnNlLkNsb3VkLkZ1bmN0aW9uUmVzcG9uc2UpIHtcblxuICAvLyDkurrjga52b2ljZeOBrmxpa2NlQ291bnTjgpJpbmNyZW1lbnTjgZnjgovjga7jgad1c2VNYXN0ZXJLZXlcbiAgUGFyc2UuQ2xvdWQudXNlTWFzdGVyS2V5KCk7XG4gIHZhciB2b2ljZSA9IHJlcXVlc3QucGFyYW1zLnZvaWNlO1xuICAvLyDihpPjga7jg4jjgrDjg6vjga/jg63jg7zjgqvjg6vjgaflrp/mlr3muIjjgb9cbiAgLy8gdm9pY2UubGlrZSA9ICF2b2ljZS5saWtlO1xuXG4gIHZhciBQYXJzZVZvaWNlID0gUGFyc2UuT2JqZWN0LmV4dGVuZCgnVm9pY2UnKTtcbiAgdmFyIHBhcnNlVm9pY2UgPSBuZXcgUGFyc2VWb2ljZSgpO1xuICBwYXJzZVZvaWNlLmlkID0gdm9pY2Uub2JqZWN0SWQ7XG5cbiAgaWYgKHZvaWNlLmxpa2UpIHtcbiAgICByZXF1ZXN0LnVzZXIuYWRkVW5pcXVlKCdsaWtlcycsIHZvaWNlLm9iamVjdElkKTtcbiAgICBwYXJzZVZvaWNlLmluY3JlbWVudCgnbGlrZUNvdW50Jyk7XG4gIH0gZWxzZSB7XG4gICAgcmVxdWVzdC51c2VyLnJlbW92ZSgnbGlrZXMnLCB2b2ljZS5vYmplY3RJZCk7XG4gICAgcGFyc2VWb2ljZS5pbmNyZW1lbnQoJ2xpa2VDb3VudCcsIC0xKTtcbiAgfVxuXG4gIHJlcXVlc3QudXNlci5zYXZlKClcbiAgLnRoZW4oKHVzZXI6IFBhcnNlLlVzZXIpID0+IHtcbiAgICBjb25zb2xlLmxvZygndXNlcjogJyArIHVzZXIpO1xuICAgIGNvbnNvbGUubG9nKCdsaWtlczogJyArIHVzZXIuZ2V0KCdsaWtlcycpKTtcbiAgICByZXR1cm4gcGFyc2VWb2ljZS5zYXZlKCk7XG4gIH0sXG4gIChlcnJvcjogUGFyc2UuRXJyb3IpID0+IHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvcjogJyArIGVycm9yLmNvZGUgKyAnICcgKyBlcnJvci5tZXNzYWdlKTtcblxuICAgIHJlc3BvbnNlLmVycm9yKCdFcnJvcjogJyArIGVycm9yLmNvZGUgKyAnICcgKyBlcnJvci5tZXNzYWdlKTtcbiAgfSlcbiAgLnRoZW4oKHBhcnNlVm9pY2U6IFBhcnNlLk9iamVjdCkgPT4ge1xuICAgIGNvbnNvbGUubG9nKCdsaWtlQ291bmQ6ICcgKyBwYXJzZVZvaWNlLmdldCgnbGlrZUNvdW50JykpO1xuICAgIHJlc3BvbnNlLnN1Y2Nlc3MocGFyc2VWb2ljZS5nZXQoJ2xpa2VDb3VudCcpKTtcbiAgfSxcbiAgKGVycm9yOiBQYXJzZS5FcnJvcikgPT4ge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yOiAnICsgZXJyb3IuY29kZSArICcgJyArIGVycm9yLm1lc3NhZ2UpO1xuXG4gICAgcmVzcG9uc2UuZXJyb3IoJ0Vycm9yOiAnICsgZXJyb3IuY29kZSArICcgJyArIGVycm9yLm1lc3NhZ2UpO1xuICB9KTtcblxufSk7XG5cblBhcnNlLkNsb3VkLmRlZmluZSgnc2F2ZVRhZycsIGZ1bmN0aW9uKHJlcXVlc3Q6IFBhcnNlLkNsb3VkLkZ1bmN0aW9uUmVxdWVzdCwgcmVzcG9uc2U6IFBhcnNlLkNsb3VkLkZ1bmN0aW9uUmVzcG9uc2UpIHtcbiAgdmFyIHRhZ3M6IHsgdGV4dDogc3RyaW5nOyB9W10gPSByZXF1ZXN0LnBhcmFtcy50YWdzO1xuXG4gIHRhZ3MuZm9yRWFjaCgodGFnOiB7IHRleHQ6IHN0cmluZzsgfSkgPT4ge1xuICAgIGNvbnNvbGUubG9nKHRhZyk7XG4gICAgdmFyIFBhcnNlVGFnID0gUGFyc2UuT2JqZWN0LmV4dGVuZCgnVGFnJyk7XG5cbiAgICB2YXIgcXVlcnkgPSBuZXcgUGFyc2UuUXVlcnkoUGFyc2VUYWcpO1xuICAgIHF1ZXJ5LmVxdWFsVG8oJ3RhZycsIHRhZy50ZXh0KTtcbiAgICBxdWVyeS5jb3VudCgpLnRoZW4oKGNvdW50OiBudW1iZXIpID0+IHtcbiAgICAgIGlmIChjb3VudCA9PT0gMCkge1xuICAgICAgICB2YXIgcGFyc2VUYWcgPSBuZXcgUGFyc2VUYWcoKTtcbiAgICAgICAgcGFyc2VUYWcuc2V0KCd0YWcnLCB0YWcudGV4dCk7XG4gICAgICAgIHJldHVybiBwYXJzZVRhZy5zYXZlKCk7XG4gICAgICB9XG4gICAgfSlcbiAgICAudGhlbigocGFyc2VUYWc6IFBhcnNlLk9iamVjdCkgPT4ge1xuICAgICAgaWYgKHBhcnNlVGFnKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdzYXZlZCB0YWc6ICcgKyBwYXJzZVRhZy5nZXQoJ3RhZycpKVxuICAgICAgfVxuICAgIH0pO1xuICB9KTtcblxufSk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=