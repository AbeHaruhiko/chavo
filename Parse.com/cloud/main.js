/// <reference path='../../../.tmp/typings/tsd.d.ts' />
Parse.Cloud.define('hello', function (request, response) {
    response.success('Hello world!');
});
Parse.Cloud.define('toggleLike', function (request, response) {
    // 人のvoiceのlikceCountをincrementするのでuseMasterKey
    Parse.Cloud.useMasterKey();
    var voice = request.params.voice;
    // ↓のトグルはローカルで実施済み
    // voice.like = !voice.like;
    var ParseVoice = Parse.Object.extend('Voice');
    var parseVoice = new ParseVoice();
    parseVoice.id = voice.objectId;
    if (voice.like) {
        request.user.addUnique('likes', voice.objectId);
        parseVoice.increment('likeCount');
    }
    else {
        request.user.remove('likes', voice.objectId);
        parseVoice.increment('likeCount', -1);
    }
    request.user.save()
        .then(function (user) {
        console.log('user: ' + user);
        console.log('likes: ' + user.get('likes'));
        return parseVoice.save();
    }, function (error) {
        console.error('Error: ' + error.code + ' ' + error.message);
        response.error('Error: ' + error.code + ' ' + error.message);
    })
        .then(function (parseVoice) {
        console.log('likeCound: ' + parseVoice.get('likeCount'));
        response.success(parseVoice.get('likeCount'));
    }, function (error) {
        console.error('Error: ' + error.code + ' ' + error.message);
        response.error('Error: ' + error.code + ' ' + error.message);
    });
});
Parse.Cloud.define('saveTag', function (request, response) {
    var tags = request.params.tags;
    tags.forEach(function (tag) {
        console.log(tag);
        var ParseTag = Parse.Object.extend('Tag');
        var query = new Parse.Query(ParseTag);
        query.equalTo('tag', tag);
        query.count().then(function (count) {
            console.log('count: ' + count);
            if (count === 0) {
                var parseTag = new ParseTag();
                parseTag.set('tag', tag);
                return parseTag.save();
            }
        })
            .then(function (parseTag) {
            if (parseTag) {
                console.log('saved tag: ' + parseTag.get('tag'));
            }
        });
    });
});
Parse.Cloud.define('addFamily', function (request, response) {
    // 人のChildを共有するようにACLを編集したりRoleを作ったりするのでマスターキー使用。
    Parse.Cloud.useMasterKey();
    // toUserIdかfromUserIdの家族を表すRoleがあるか
    var toUser = new Parse.User();
    var fromUser = new Parse.User();
    // 申請先ユーザ（承認者）
    toUser.id = request.user.id;
    // 申請元ユーザ（申請者）
    fromUser.id = request.params.familyApplication.fromUserObjectId;
    var toUserFamilyQuery = new Parse.Query('Family');
    toUserFamilyQuery.equalTo('member', request.user.id);
    var fromUserFamilyQuery = new Parse.Query('Family');
    fromUserFamilyQuery.equalTo('member', request.params.familyApplication.fromUserId);
    // orでクエリを作る。
    var familyQuery = Parse.Query.or(toUserFamilyQuery, fromUserFamilyQuery);
    var family;
    var familyRole;
    familyQuery.first().then(function (family) {
        console.log('enter 1');
        console.log(family);
        if (!family) {
            console.log('既存familyなし');
            // 既存のFamilyがないので作る。
            var ParseFamily = Parse.Object.extend('Family');
            family = new ParseFamily();
        }
        family.addUnique('member', toUser.id);
        family.addUnique('member', fromUser.id);
        return family.save();
    }).then(function (result) {
        console.log('enter 2');
        console.log(result);
        family = result;
        // .FamilyのオブジェクトIDをnameに持つRoleを探す。
        var familyRoleQuery = new Parse.Query(Parse.Role);
        console.log(result.id);
        familyRoleQuery.equalTo('name', result.id);
        return familyRoleQuery.first();
    }).then(function (result) {
        console.log('enter 3');
        console.log(result);
        if (result) {
            console.log('ロールあり: name = ' + family.id + ': ' + result);
            familyRole = result;
        }
        else {
            // 既存Roleがなければ作る。
            familyRole = new Parse.Role(family.id, new Parse.ACL());
            console.log('ロールなし: name = ' + family.id + 'を作ります。');
        }
        console.log(familyRole.getUsers());
        familyRole.getUsers().add(toUser);
        familyRole.getUsers().add(fromUser);
        return familyRole.save();
    }).then(function (result) {
        console.log('enter 4');
        console.log(result);
        // 承認者のこども情報を取得
        var ParseChild = Parse.Object.extend('Child');
        var query = new Parse.Query(ParseChild);
        return query.find();
    }).then(function (children) {
        console.log('enter 5');
        var promises = [];
        children.forEach(function (child) {
            console.log(child.get('nickName') + ':' + familyRole.getName() + 'を追加します。');
            var childACL = new Parse.ACL();
            childACL.setRoleReadAccess(familyRole, true);
            childACL.setRoleWriteAccess(familyRole, true);
            child.setACL(childACL);
            promises.push(child.save());
        });
        return Parse.Promise.when(promises);
    }).then(function () {
        console.log('enter 6');
        response.success('Success!');
    }, function (error) {
        console.error('Error: ' + error.code + ' ' + error.message);
    });
});

//# sourceMappingURL=data:application/json;base64,